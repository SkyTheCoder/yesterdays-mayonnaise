String mapName = "Separation";

color staticColor = color(0, 0, 0, 255);
color staticSpikeColor = color(255, 0, 246, 255);
color redColor = color(255, 0, 8, 255);
color redSpikeColor = color(255, 136, 0, 255);
color blueColor = color(0, 12, 255, 255);
color blueSpikeColor = color(0, 225, 255, 255);
color chipColor = color(255, 233, 0, 255);

void setup()
{
  PImage image = loadImage(mapName + ".png");
  String staticData = "";
  String redData = "";
  String blueData = "";
  String cpp = "// Level: " + mapName + ".\r\n// Map data automatically generated by Processing.\r\n// Each pair of floats in an array is a coordinate for a tile, in tilemap space.\r\n\r\n";
  FloatList staticSpikes = new FloatList();
  FloatList redSpikes = new FloatList();
  FloatList blueSpikes = new FloatList();
  FloatList chips = new FloatList();
  for (int y = 0; y < image.height; y++)
  {
    for (int x = 0; x < image.width; x++)
    {
      color c = image.get(x, y);
      
      int staticValue = 0;
      int redValue = 0;
      int blueValue = 0;
      
      if (c == staticColor)
      {
        staticValue = 1;
      }
      else if (c == redColor)
      {
        redValue = 2;
      }
      else if (c == blueColor)
      {
        blueValue = 3;
      }
      else if (c == staticSpikeColor)
      {
        staticSpikes.push(x);
        staticSpikes.push(y);
      }
      else if (c == redSpikeColor)
      {
        redSpikes.push(x);
        redSpikes.push(y);
      }
      else if (c == blueSpikeColor)
      {
        blueSpikes.push(x);
        blueSpikes.push(y);
      }
      else if (c == chipColor)
      {
        chips.push(x);
        chips.push(y);
      }
      
      staticData += staticValue + " ";
      redData += redValue + " ";
      blueData += blueValue + " ";
    }
    
    staticData += "\r\n";
    redData += "\r\n";
    blueData += "\r\n";
  }
  
  if (staticSpikes.size() > 0)
  {
    cpp += "float staticSpikes[" + staticSpikes.size() + "] = {";
    for (int i = 0; i < staticSpikes.size(); i++)
    {
      if (i % 32 == 0)
        cpp += "\r\n\t";
      cpp += staticSpikes.get(i) + "f";
      if (i != staticSpikes.size() - 1)
        cpp += ", ";
    }
    cpp += "\r\n};\r\n\r\n";
    cpp += "for (int i = 0; i < " + staticSpikes.size() + "; i += 2)\r\n{\r\n";
    cpp += "\tGameObject* spike = new GameObject(*objectManager.GetArchetypeByName(\"StaticSpike\"));\r\n";
    cpp += "\tstatic_cast<Transform*>(spike->GetComponent(\"Transform\"))->SetTranslation(Vector2D(staticSpikes[i] * 100.0f, staticSpikes[i + 1] * -100.0f));\r\n";
    cpp += "\tobjectManager.AddObject(*spike);\r\n";
    cpp += "}\r\n\r\n";
  }
  
  if (redSpikes.size() > 0)
  {
    cpp += "float redSpikes[" + redSpikes.size() + "] = {";
    for (int i = 0; i < redSpikes.size(); i++)
    {
      if (i % 32 == 0)
        cpp += "\r\n\t";
      cpp += redSpikes.get(i) + "f";
      if (i != redSpikes.size() - 1)
        cpp += ", ";
    }
    cpp += "\r\n};\r\n\r\n";
    cpp += "for (int i = 0; i < " + redSpikes.size() + "; i += 2)\r\n{\r\n";
    cpp += "\tGameObject* spike = new GameObject(*objectManager.GetArchetypeByName(\"RedSpike\"));\r\n";
    cpp += "\tstatic_cast<Transform*>(spike->GetComponent(\"Transform\"))->SetTranslation(Vector2D(redSpikes[i] * 100.0f, redSpikes[i + 1] * -100.0f));\r\n";
    cpp += "\tdimensionController.AddSpikeToDimension(redDimension, spike);\r\n";
    cpp += "\tobjectManager.AddObject(*spike);\r\n";
    cpp += "}\r\n\r\n";
  }
  
  if (blueSpikes.size() > 0)
  {
    cpp += "float blueSpikes[" + blueSpikes.size() + "] = {";
    for (int i = 0; i < blueSpikes.size(); i++)
    {
      if (i % 32 == 0)
        cpp += "\r\n\t";
      cpp += blueSpikes.get(i) + "f";
      if (i != blueSpikes.size() - 1)
        cpp += ", ";
    }
    cpp += "\r\n};\r\n\r\n";
    cpp += "for (int i = 0; i < " + blueSpikes.size() + "; i += 2)\r\n{\r\n";
    cpp += "\tGameObject* spike = new GameObject(*objectManager.GetArchetypeByName(\"BlueSpike\"));\r\n";
    cpp += "\tstatic_cast<Transform*>(spike->GetComponent(\"Transform\"))->SetTranslation(Vector2D(blueSpikes[i] * 100.0f, blueSpikes[i + 1] * -100.0f));\r\n";
    cpp += "\tdimensionController.AddSpikeToDimension(blueDimension, spike);\r\n";
    cpp += "\tobjectManager.AddObject(*spike);\r\n";
    cpp += "}\r\n\r\n";
  }
  
  if (chips.size() > 0)
  {
    cpp += "float chipsSpawns[" + chips.size() + "] = {";
    for (int i = 0; i < chips.size(); i++)
    {
      if (i % 32 == 0)
        cpp += "\r\n\t";
      cpp += chips.get(i) + "f";
      if (i != chips.size() - 1)
        cpp += ", ";
    }
    cpp += "\r\n};\r\n\r\n";
    cpp += "for (int i = 0; i < " + chips.size() + "; i += 2)\r\n{\r\n";
    cpp += "\tGameObject* chips = new GameObject(*objectManager.GetArchetypeByName(\"Collectible\"));\r\n";
    cpp += "\tstatic_cast<Transform*>(chips->GetComponent(\"Transform\"))->SetTranslation(Vector2D(chipsSpawns[i] * 100.0f, chipsSpawns[i + 1] * -100.0f));\r\n";
    cpp += "\tobjectManager.AddObject(*chips);\r\n";
    cpp += "}\r\n\r\n";
  }
  
  PrintWriter staticOutput = createWriter(mapName + "Static.txt");
  staticOutput.println("width " + image.width);
  staticOutput.println("height " + image.height);
  staticOutput.println("data");
  staticOutput.print(staticData);
  staticOutput.flush();
  staticOutput.close();
  
  PrintWriter redOutput = createWriter(mapName + "Red.txt");
  redOutput.println("width " + image.width);
  redOutput.println("height " + image.height);
  redOutput.println("data");
  redOutput.print(redData);
  redOutput.flush();
  redOutput.close();
  
  PrintWriter blueOutput = createWriter(mapName + "Blue.txt");
  blueOutput.println("width " + image.width);
  blueOutput.println("height " + image.height);
  blueOutput.println("data");
  blueOutput.print(blueData);
  blueOutput.flush();
  blueOutput.close();
  
  PrintWriter cppOutput = createWriter(mapName + ".cpp");
  cppOutput.print(cpp);
  cppOutput.flush();
  cppOutput.close();
}

void draw()
{
  exit();
}
